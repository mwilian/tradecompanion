'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
'
Namespace WSScalper
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebServicesScalperSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebServicesScalper
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidatePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForgotPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoggedinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsersDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EditUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrderReturnDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrderRowsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrdersDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrdersFromQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsEmailIDExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLoginIDExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckDependencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLTradeDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPLTradeDSFromQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidatePasswordVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmailIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPIPSFromPLTradeQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGraphDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsersDSFromQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TradeCompanion.My.MySettings.Default.TradeCompanion_WSScalper_WebServicesScalper
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateUserCompleted As CreateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyPasswordCompleted As ModifyPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidatePasswordCompleted As ValidatePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event ForgotPasswordCompleted As ForgotPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event LoggedinCompleted As LoggedinCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsersDSCompleted As GetUsersDSCompletedEventHandler
        
        '''<remarks/>
        Public Event EditUsersCompleted As EditUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrderReturnDateCompleted As AddOrderReturnDateCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrderCompleted As AddOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrdersCompleted As AddOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrderRowsCompleted As AddOrderRowsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrdersDSCompleted As GetOrdersDSCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUserCompleted As AddUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrdersFromQueryCompleted As GetOrdersFromQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event IsEmailIDExistCompleted As IsEmailIDExistCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLoginIDExistCompleted As IsLoginIDExistCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserCompleted As DeleteUserCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckDependencyCompleted As CheckDependencyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLTradeDSCompleted As GetPLTradeDSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPLTradeDSFromQueryCompleted As GetPLTradeDSFromQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidatePasswordVersionCompleted As ValidatePasswordVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmailIDCompleted As GetEmailIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPIPSFromPLTradeQueryCompleted As GetPIPSFromPLTradeQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGraphDataCompleted As GetGraphDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsersDSFromQueryCompleted As GetUsersDSFromQueryCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateUser(ByVal userRow As UserRow) As Integer
            Dim results() As Object = Me.Invoke("CreateUser", New Object() {userRow})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateUserAsync(ByVal userRow As UserRow)
            Me.CreateUserAsync(userRow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateUserAsync(ByVal userRow As UserRow, ByVal userState As Object)
            If (Me.CreateUserOperationCompleted Is Nothing) Then
                Me.CreateUserOperationCompleted = AddressOf Me.OnCreateUserOperationCompleted
            End If
            Me.InvokeAsync("CreateUser", New Object() {userRow}, Me.CreateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateUserCompleted(Me, New CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModifyPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyPassword(ByVal loginid As String, ByVal oldpassword As String, ByVal newpassword As String) As Boolean
            Dim results() As Object = Me.Invoke("ModifyPassword", New Object() {loginid, oldpassword, newpassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyPasswordAsync(ByVal loginid As String, ByVal oldpassword As String, ByVal newpassword As String)
            Me.ModifyPasswordAsync(loginid, oldpassword, newpassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyPasswordAsync(ByVal loginid As String, ByVal oldpassword As String, ByVal newpassword As String, ByVal userState As Object)
            If (Me.ModifyPasswordOperationCompleted Is Nothing) Then
                Me.ModifyPasswordOperationCompleted = AddressOf Me.OnModifyPasswordOperationCompleted
            End If
            Me.InvokeAsync("ModifyPassword", New Object() {loginid, oldpassword, newpassword}, Me.ModifyPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyPasswordCompleted(Me, New ModifyPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidatePassword(ByVal loginid As String, ByVal password As String) As Integer
            Dim results() As Object = Me.Invoke("ValidatePassword", New Object() {loginid, password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidatePasswordAsync(ByVal loginid As String, ByVal password As String)
            Me.ValidatePasswordAsync(loginid, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidatePasswordAsync(ByVal loginid As String, ByVal password As String, ByVal userState As Object)
            If (Me.ValidatePasswordOperationCompleted Is Nothing) Then
                Me.ValidatePasswordOperationCompleted = AddressOf Me.OnValidatePasswordOperationCompleted
            End If
            Me.InvokeAsync("ValidatePassword", New Object() {loginid, password}, Me.ValidatePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidatePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidatePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidatePasswordCompleted(Me, New ValidatePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ForgotPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ForgotPassword(ByVal loginid As String, ByVal email As String) As Integer
            Dim results() As Object = Me.Invoke("ForgotPassword", New Object() {loginid, email})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForgotPasswordAsync(ByVal loginid As String, ByVal email As String)
            Me.ForgotPasswordAsync(loginid, email, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForgotPasswordAsync(ByVal loginid As String, ByVal email As String, ByVal userState As Object)
            If (Me.ForgotPasswordOperationCompleted Is Nothing) Then
                Me.ForgotPasswordOperationCompleted = AddressOf Me.OnForgotPasswordOperationCompleted
            End If
            Me.InvokeAsync("ForgotPassword", New Object() {loginid, email}, Me.ForgotPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnForgotPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForgotPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForgotPasswordCompleted(Me, New ForgotPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Loggedin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Loggedin(ByVal loginid As String, ByVal status As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("Loggedin", New Object() {loginid, status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoggedinAsync(ByVal loginid As String, ByVal status As Boolean)
            Me.LoggedinAsync(loginid, status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoggedinAsync(ByVal loginid As String, ByVal status As Boolean, ByVal userState As Object)
            If (Me.LoggedinOperationCompleted Is Nothing) Then
                Me.LoggedinOperationCompleted = AddressOf Me.OnLoggedinOperationCompleted
            End If
            Me.InvokeAsync("Loggedin", New Object() {loginid, status}, Me.LoggedinOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoggedinOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoggedinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoggedinCompleted(Me, New LoggedinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsersDS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsersDS() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUsersDS", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsersDSAsync()
            Me.GetUsersDSAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsersDSAsync(ByVal userState As Object)
            If (Me.GetUsersDSOperationCompleted Is Nothing) Then
                Me.GetUsersDSOperationCompleted = AddressOf Me.OnGetUsersDSOperationCompleted
            End If
            Me.InvokeAsync("GetUsersDS", New Object(-1) {}, Me.GetUsersDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsersDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsersDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsersDSCompleted(Me, New GetUsersDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EditUsers", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EditUsers(ByVal userRow As UserRow) As Integer
            Dim results() As Object = Me.Invoke("EditUsers", New Object() {userRow})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EditUsersAsync(ByVal userRow As UserRow)
            Me.EditUsersAsync(userRow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EditUsersAsync(ByVal userRow As UserRow, ByVal userState As Object)
            If (Me.EditUsersOperationCompleted Is Nothing) Then
                Me.EditUsersOperationCompleted = AddressOf Me.OnEditUsersOperationCompleted
            End If
            Me.InvokeAsync("EditUsers", New Object() {userRow}, Me.EditUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnEditUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.EditUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EditUsersCompleted(Me, New EditUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOrderReturnDate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrderReturnDate(ByVal orderRow As OrderRow) As Date
            Dim results() As Object = Me.Invoke("AddOrderReturnDate", New Object() {orderRow})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrderReturnDateAsync(ByVal orderRow As OrderRow)
            Me.AddOrderReturnDateAsync(orderRow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrderReturnDateAsync(ByVal orderRow As OrderRow, ByVal userState As Object)
            If (Me.AddOrderReturnDateOperationCompleted Is Nothing) Then
                Me.AddOrderReturnDateOperationCompleted = AddressOf Me.OnAddOrderReturnDateOperationCompleted
            End If
            Me.InvokeAsync("AddOrderReturnDate", New Object() {orderRow}, Me.AddOrderReturnDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrderReturnDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrderReturnDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrderReturnDateCompleted(Me, New AddOrderReturnDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOrder", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrder(ByVal orderRow As OrderRow) As Integer
            Dim results() As Object = Me.Invoke("AddOrder", New Object() {orderRow})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrderAsync(ByVal orderRow As OrderRow)
            Me.AddOrderAsync(orderRow, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrderAsync(ByVal orderRow As OrderRow, ByVal userState As Object)
            If (Me.AddOrderOperationCompleted Is Nothing) Then
                Me.AddOrderOperationCompleted = AddressOf Me.OnAddOrderOperationCompleted
            End If
            Me.InvokeAsync("AddOrder", New Object() {orderRow}, Me.AddOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrderCompleted(Me, New AddOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOrders", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrders(ByVal dsUser As System.Data.DataSet, ByVal loginID As String, ByVal currenExID As String) As Boolean
            Dim results() As Object = Me.Invoke("AddOrders", New Object() {dsUser, loginID, currenExID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrdersAsync(ByVal dsUser As System.Data.DataSet, ByVal loginID As String, ByVal currenExID As String)
            Me.AddOrdersAsync(dsUser, loginID, currenExID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrdersAsync(ByVal dsUser As System.Data.DataSet, ByVal loginID As String, ByVal currenExID As String, ByVal userState As Object)
            If (Me.AddOrdersOperationCompleted Is Nothing) Then
                Me.AddOrdersOperationCompleted = AddressOf Me.OnAddOrdersOperationCompleted
            End If
            Me.InvokeAsync("AddOrders", New Object() {dsUser, loginID, currenExID}, Me.AddOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrdersCompleted(Me, New AddOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddOrderRows", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrderRows(ByVal orderRows() As OrderRow) As Boolean
            Dim results() As Object = Me.Invoke("AddOrderRows", New Object() {orderRows})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrderRowsAsync(ByVal orderRows() As OrderRow)
            Me.AddOrderRowsAsync(orderRows, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrderRowsAsync(ByVal orderRows() As OrderRow, ByVal userState As Object)
            If (Me.AddOrderRowsOperationCompleted Is Nothing) Then
                Me.AddOrderRowsOperationCompleted = AddressOf Me.OnAddOrderRowsOperationCompleted
            End If
            Me.InvokeAsync("AddOrderRows", New Object() {orderRows}, Me.AddOrderRowsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrderRowsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrderRowsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrderRowsCompleted(Me, New AddOrderRowsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrdersDS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrdersDS() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrdersDS", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrdersDSAsync()
            Me.GetOrdersDSAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrdersDSAsync(ByVal userState As Object)
            If (Me.GetOrdersDSOperationCompleted Is Nothing) Then
                Me.GetOrdersDSOperationCompleted = AddressOf Me.OnGetOrdersDSOperationCompleted
            End If
            Me.InvokeAsync("GetOrdersDS", New Object(-1) {}, Me.GetOrdersDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrdersDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrdersDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrdersDSCompleted(Me, New GetOrdersDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUser(ByVal loginId As String, ByVal userName As String, ByVal emailId As String, ByVal phoneNo As String, ByVal address As String, ByVal city As String, ByVal country As String) As Integer
            Dim results() As Object = Me.Invoke("AddUser", New Object() {loginId, userName, emailId, phoneNo, address, city, country})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUserAsync(ByVal loginId As String, ByVal userName As String, ByVal emailId As String, ByVal phoneNo As String, ByVal address As String, ByVal city As String, ByVal country As String)
            Me.AddUserAsync(loginId, userName, emailId, phoneNo, address, city, country, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUserAsync(ByVal loginId As String, ByVal userName As String, ByVal emailId As String, ByVal phoneNo As String, ByVal address As String, ByVal city As String, ByVal country As String, ByVal userState As Object)
            If (Me.AddUserOperationCompleted Is Nothing) Then
                Me.AddUserOperationCompleted = AddressOf Me.OnAddUserOperationCompleted
            End If
            Me.InvokeAsync("AddUser", New Object() {loginId, userName, emailId, phoneNo, address, city, country}, Me.AddUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUserCompleted(Me, New AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrdersFromQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrdersFromQuery(ByVal sql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrdersFromQuery", New Object() {sql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrdersFromQueryAsync(ByVal sql As String)
            Me.GetOrdersFromQueryAsync(sql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrdersFromQueryAsync(ByVal sql As String, ByVal userState As Object)
            If (Me.GetOrdersFromQueryOperationCompleted Is Nothing) Then
                Me.GetOrdersFromQueryOperationCompleted = AddressOf Me.OnGetOrdersFromQueryOperationCompleted
            End If
            Me.InvokeAsync("GetOrdersFromQuery", New Object() {sql}, Me.GetOrdersFromQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrdersFromQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrdersFromQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrdersFromQueryCompleted(Me, New GetOrdersFromQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsEmailIDExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsEmailIDExist(ByVal emailId As String) As Boolean
            Dim results() As Object = Me.Invoke("IsEmailIDExist", New Object() {emailId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsEmailIDExistAsync(ByVal emailId As String)
            Me.IsEmailIDExistAsync(emailId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsEmailIDExistAsync(ByVal emailId As String, ByVal userState As Object)
            If (Me.IsEmailIDExistOperationCompleted Is Nothing) Then
                Me.IsEmailIDExistOperationCompleted = AddressOf Me.OnIsEmailIDExistOperationCompleted
            End If
            Me.InvokeAsync("IsEmailIDExist", New Object() {emailId}, Me.IsEmailIDExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsEmailIDExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsEmailIDExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsEmailIDExistCompleted(Me, New IsEmailIDExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsLoginIDExist", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLoginIDExist(ByVal loginId As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLoginIDExist", New Object() {loginId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLoginIDExistAsync(ByVal loginId As String)
            Me.IsLoginIDExistAsync(loginId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLoginIDExistAsync(ByVal loginId As String, ByVal userState As Object)
            If (Me.IsLoginIDExistOperationCompleted Is Nothing) Then
                Me.IsLoginIDExistOperationCompleted = AddressOf Me.OnIsLoginIDExistOperationCompleted
            End If
            Me.InvokeAsync("IsLoginIDExist", New Object() {loginId}, Me.IsLoginIDExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLoginIDExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLoginIDExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLoginIDExistCompleted(Me, New IsLoginIDExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUser(ByVal userId As Integer) As Integer
            Dim results() As Object = Me.Invoke("DeleteUser", New Object() {userId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal userId As Integer)
            Me.DeleteUserAsync(userId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal userId As Integer, ByVal userState As Object)
            If (Me.DeleteUserOperationCompleted Is Nothing) Then
                Me.DeleteUserOperationCompleted = AddressOf Me.OnDeleteUserOperationCompleted
            End If
            Me.InvokeAsync("DeleteUser", New Object() {userId}, Me.DeleteUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserCompleted(Me, New DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckDependency", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckDependency(ByVal tradecompanionId As String) As Integer
            Dim results() As Object = Me.Invoke("CheckDependency", New Object() {tradecompanionId})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckDependencyAsync(ByVal tradecompanionId As String)
            Me.CheckDependencyAsync(tradecompanionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckDependencyAsync(ByVal tradecompanionId As String, ByVal userState As Object)
            If (Me.CheckDependencyOperationCompleted Is Nothing) Then
                Me.CheckDependencyOperationCompleted = AddressOf Me.OnCheckDependencyOperationCompleted
            End If
            Me.InvokeAsync("CheckDependency", New Object() {tradecompanionId}, Me.CheckDependencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckDependencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckDependencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckDependencyCompleted(Me, New CheckDependencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLTradeDS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLTradeDS() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPLTradeDS", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLTradeDSAsync()
            Me.GetPLTradeDSAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLTradeDSAsync(ByVal userState As Object)
            If (Me.GetPLTradeDSOperationCompleted Is Nothing) Then
                Me.GetPLTradeDSOperationCompleted = AddressOf Me.OnGetPLTradeDSOperationCompleted
            End If
            Me.InvokeAsync("GetPLTradeDS", New Object(-1) {}, Me.GetPLTradeDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLTradeDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLTradeDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLTradeDSCompleted(Me, New GetPLTradeDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPLTradeDSFromQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPLTradeDSFromQuery(ByVal sql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPLTradeDSFromQuery", New Object() {sql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPLTradeDSFromQueryAsync(ByVal sql As String)
            Me.GetPLTradeDSFromQueryAsync(sql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPLTradeDSFromQueryAsync(ByVal sql As String, ByVal userState As Object)
            If (Me.GetPLTradeDSFromQueryOperationCompleted Is Nothing) Then
                Me.GetPLTradeDSFromQueryOperationCompleted = AddressOf Me.OnGetPLTradeDSFromQueryOperationCompleted
            End If
            Me.InvokeAsync("GetPLTradeDSFromQuery", New Object() {sql}, Me.GetPLTradeDSFromQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPLTradeDSFromQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPLTradeDSFromQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPLTradeDSFromQueryCompleted(Me, New GetPLTradeDSFromQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidatePasswordVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidatePasswordVersion(ByVal loginid As String, ByVal password As String, ByVal version As String) As Integer
            Dim results() As Object = Me.Invoke("ValidatePasswordVersion", New Object() {loginid, password, version})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidatePasswordVersionAsync(ByVal loginid As String, ByVal password As String, ByVal version As String)
            Me.ValidatePasswordVersionAsync(loginid, password, version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidatePasswordVersionAsync(ByVal loginid As String, ByVal password As String, ByVal version As String, ByVal userState As Object)
            If (Me.ValidatePasswordVersionOperationCompleted Is Nothing) Then
                Me.ValidatePasswordVersionOperationCompleted = AddressOf Me.OnValidatePasswordVersionOperationCompleted
            End If
            Me.InvokeAsync("ValidatePasswordVersion", New Object() {loginid, password, version}, Me.ValidatePasswordVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidatePasswordVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidatePasswordVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidatePasswordVersionCompleted(Me, New ValidatePasswordVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmailID", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmailID(ByVal loginid As String) As String
            Dim results() As Object = Me.Invoke("GetEmailID", New Object() {loginid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmailIDAsync(ByVal loginid As String)
            Me.GetEmailIDAsync(loginid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmailIDAsync(ByVal loginid As String, ByVal userState As Object)
            If (Me.GetEmailIDOperationCompleted Is Nothing) Then
                Me.GetEmailIDOperationCompleted = AddressOf Me.OnGetEmailIDOperationCompleted
            End If
            Me.InvokeAsync("GetEmailID", New Object() {loginid}, Me.GetEmailIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmailIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmailIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmailIDCompleted(Me, New GetEmailIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPIPSFromPLTradeQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPIPSFromPLTradeQuery(ByVal sql As String, ByVal startDate As String, ByVal endDate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPIPSFromPLTradeQuery", New Object() {sql, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPIPSFromPLTradeQueryAsync(ByVal sql As String, ByVal startDate As String, ByVal endDate As String)
            Me.GetPIPSFromPLTradeQueryAsync(sql, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPIPSFromPLTradeQueryAsync(ByVal sql As String, ByVal startDate As String, ByVal endDate As String, ByVal userState As Object)
            If (Me.GetPIPSFromPLTradeQueryOperationCompleted Is Nothing) Then
                Me.GetPIPSFromPLTradeQueryOperationCompleted = AddressOf Me.OnGetPIPSFromPLTradeQueryOperationCompleted
            End If
            Me.InvokeAsync("GetPIPSFromPLTradeQuery", New Object() {sql, startDate, endDate}, Me.GetPIPSFromPLTradeQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPIPSFromPLTradeQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPIPSFromPLTradeQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPIPSFromPLTradeQueryCompleted(Me, New GetPIPSFromPLTradeQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGraphData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGraphData(ByVal sql As String, ByVal startDate As String, ByVal endDate As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetGraphData", New Object() {sql, startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGraphDataAsync(ByVal sql As String, ByVal startDate As String, ByVal endDate As String)
            Me.GetGraphDataAsync(sql, startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGraphDataAsync(ByVal sql As String, ByVal startDate As String, ByVal endDate As String, ByVal userState As Object)
            If (Me.GetGraphDataOperationCompleted Is Nothing) Then
                Me.GetGraphDataOperationCompleted = AddressOf Me.OnGetGraphDataOperationCompleted
            End If
            Me.InvokeAsync("GetGraphData", New Object() {sql, startDate, endDate}, Me.GetGraphDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGraphDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGraphDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGraphDataCompleted(Me, New GetGraphDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsersDSFromQuery", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsersDSFromQuery(ByVal sql As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUsersDSFromQuery", New Object() {sql})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsersDSFromQueryAsync(ByVal sql As String)
            Me.GetUsersDSFromQueryAsync(sql, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsersDSFromQueryAsync(ByVal sql As String, ByVal userState As Object)
            If (Me.GetUsersDSFromQueryOperationCompleted Is Nothing) Then
                Me.GetUsersDSFromQueryOperationCompleted = AddressOf Me.OnGetUsersDSFromQueryOperationCompleted
            End If
            Me.InvokeAsync("GetUsersDSFromQuery", New Object() {sql}, Me.GetUsersDSFromQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsersDSFromQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsersDSFromQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsersDSFromQueryCompleted(Me, New GetUsersDSFromQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class UserRow
        
        Private idField As Integer
        
        Private loginIdField As String
        
        Private usernameField As String
        
        Private passwordField As String
        
        Private emailIdField As String
        
        Private phoneNoField As String
        
        Private activeField As Boolean
        
        Private loggedInField As Boolean
        
        Private versionField As String
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginId() As String
            Get
                Return Me.loginIdField
            End Get
            Set
                Me.loginIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Username() As String
            Get
                Return Me.usernameField
            End Get
            Set
                Me.usernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailId() As String
            Get
                Return Me.emailIdField
            End Get
            Set
                Me.emailIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNo() As String
            Get
                Return Me.phoneNoField
            End Get
            Set
                Me.phoneNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoggedIn() As Boolean
            Get
                Return Me.loggedInField
            End Get
            Set
                Me.loggedInField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class OrderRow
        
        Private idField As Integer
        
        Private orderIDField As String
        
        Private exchangeField As String
        
        Private statusField As String
        
        Private symbolField As String
        
        Private monthYearField As String
        
        Private sideField As Integer
        
        Private quantityField As Integer
        
        Private priceField As String
        
        Private timeStampField As Date
        
        Private tradeCurrencyField As String
        
        Private execOrderIdField As String
        
        Private dateIDField As Date
        
        Private tradeCompanionIDField As String
        
        Private currenExIDField As String
        
        Private dateIDCustomerField As Date
        
        Private senderIdField As String
        
        Private marketPriceField As Double
        
        '''<remarks/>
        Public Property ID() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderID() As String
            Get
                Return Me.orderIDField
            End Get
            Set
                Me.orderIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Exchange() As String
            Get
                Return Me.exchangeField
            End Get
            Set
                Me.exchangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Symbol() As String
            Get
                Return Me.symbolField
            End Get
            Set
                Me.symbolField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MonthYear() As String
            Get
                Return Me.monthYearField
            End Get
            Set
                Me.monthYearField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Side() As Integer
            Get
                Return Me.sideField
            End Get
            Set
                Me.sideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Quantity() As Integer
            Get
                Return Me.quantityField
            End Get
            Set
                Me.quantityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Price() As String
            Get
                Return Me.priceField
            End Get
            Set
                Me.priceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeStamp() As Date
            Get
                Return Me.timeStampField
            End Get
            Set
                Me.timeStampField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TradeCurrency() As String
            Get
                Return Me.tradeCurrencyField
            End Get
            Set
                Me.tradeCurrencyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExecOrderId() As String
            Get
                Return Me.execOrderIdField
            End Get
            Set
                Me.execOrderIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateID() As Date
            Get
                Return Me.dateIDField
            End Get
            Set
                Me.dateIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TradeCompanionID() As String
            Get
                Return Me.tradeCompanionIDField
            End Get
            Set
                Me.tradeCompanionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrenExID() As String
            Get
                Return Me.currenExIDField
            End Get
            Set
                Me.currenExIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateIDCustomer() As Date
            Get
                Return Me.dateIDCustomerField
            End Get
            Set
                Me.dateIDCustomerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SenderId() As String
            Get
                Return Me.senderIdField
            End Get
            Set
                Me.senderIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MarketPrice() As Double
            Get
                Return Me.marketPriceField
            End Get
            Set
                Me.marketPriceField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateUserCompletedEventHandler(ByVal sender As Object, ByVal e As CreateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifyPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ValidatePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ValidatePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidatePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ForgotPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ForgotPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForgotPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub LoggedinCompletedEventHandler(ByVal sender As Object, ByVal e As LoggedinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoggedinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsersDSCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsersDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsersDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub EditUsersCompletedEventHandler(ByVal sender As Object, ByVal e As EditUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EditUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddOrderReturnDateCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrderReturnDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrderReturnDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddOrderCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddOrdersCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrdersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrdersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddOrderRowsCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrderRowsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrderRowsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOrdersDSCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrdersDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrdersDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub AddUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOrdersFromQueryCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrdersFromQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrdersFromQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IsEmailIDExistCompletedEventHandler(ByVal sender As Object, ByVal e As IsEmailIDExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsEmailIDExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IsLoginIDExistCompletedEventHandler(ByVal sender As Object, ByVal e As IsLoginIDExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLoginIDExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DeleteUserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CheckDependencyCompletedEventHandler(ByVal sender As Object, ByVal e As CheckDependencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckDependencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPLTradeDSCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLTradeDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLTradeDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPLTradeDSFromQueryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPLTradeDSFromQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPLTradeDSFromQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ValidatePasswordVersionCompletedEventHandler(ByVal sender As Object, ByVal e As ValidatePasswordVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidatePasswordVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEmailIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmailIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmailIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPIPSFromPLTradeQueryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPIPSFromPLTradeQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPIPSFromPLTradeQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetGraphDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetGraphDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGraphDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetUsersDSFromQueryCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsersDSFromQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsersDSFromQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
