'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
'
Namespace com.efxnow.api
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="https://api.efxnow.com/webservices2.3")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetCommentDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDealBlotterDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDealBlotterDataSetWithFilterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDelayedRatesDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarginBlotterDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewsDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderBlotterDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPositionBlotterDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRatesDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHistoricRatesDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSymbolBlotterDataSetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTickerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEconomicCalendarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountServicesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDealBlotterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDealBlotterWithFilterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarginBlotterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderBlotterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPositionBlotterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSymbolBlotterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPairSettingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceSingleOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifySingleOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceOCOOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyOCOOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DealRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DealRequestByDealIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DealRequestAtBestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelOrderByOrderIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceIfThenOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyIfThenOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceIfThenOCOOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyIfThenOCOOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceSingleASSPOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifySingleASSPOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceOCOASSPOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModifyOCOASSPOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EchoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRatesServerAuthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubAccountAuthenticationKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCommentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Gain.My.MySettings.Default.Gain_com_efxnow_api_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetCommentDataSetCompleted As GetCommentDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDealBlotterDataSetCompleted As GetDealBlotterDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDealBlotterDataSetWithFilterCompleted As GetDealBlotterDataSetWithFilterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDelayedRatesDataSetCompleted As GetDelayedRatesDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarginBlotterDataSetCompleted As GetMarginBlotterDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewsDataSetCompleted As GetNewsDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderBlotterDataSetCompleted As GetOrderBlotterDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPositionBlotterDataSetCompleted As GetPositionBlotterDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRatesDataSetCompleted As GetRatesDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHistoricRatesDataSetCompleted As GetHistoricRatesDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSymbolBlotterDataSetCompleted As GetSymbolBlotterDataSetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTickerCompleted As GetTickerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEconomicCalendarCompleted As GetEconomicCalendarCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountCompleted As GetAccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountServicesCompleted As GetAccountServicesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDealBlotterCompleted As GetDealBlotterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDealBlotterWithFilterCompleted As GetDealBlotterWithFilterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarginBlotterCompleted As GetMarginBlotterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderBlotterCompleted As GetOrderBlotterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPositionBlotterCompleted As GetPositionBlotterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSymbolBlotterCompleted As GetSymbolBlotterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPairSettingsCompleted As GetPairSettingsCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceSingleOrderCompleted As PlaceSingleOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifySingleOrderCompleted As ModifySingleOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceOCOOrderCompleted As PlaceOCOOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyOCOOrderCompleted As ModifyOCOOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelOrderCompleted As CancelOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event DealRequestCompleted As DealRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event DealRequestByDealIdCompleted As DealRequestByDealIdCompletedEventHandler
        
        '''<remarks/>
        Public Event DealRequestAtBestCompleted As DealRequestAtBestCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelOrderByOrderIDCompleted As CancelOrderByOrderIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceIfThenOrderCompleted As PlaceIfThenOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyIfThenOrderCompleted As ModifyIfThenOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceIfThenOCOOrderCompleted As PlaceIfThenOCOOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyIfThenOCOOrderCompleted As ModifyIfThenOCOOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceSingleASSPOrderCompleted As PlaceSingleASSPOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifySingleASSPOrderCompleted As ModifySingleASSPOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceOCOASSPOrderCompleted As PlaceOCOASSPOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ModifyOCOASSPOrderCompleted As ModifyOCOASSPOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event EchoCompleted As EchoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTimeCompleted As GetTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRatesServerAuthCompleted As GetRatesServerAuthCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubAccountAuthenticationKeyCompleted As GetSubAccountAuthenticationKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCommentCompleted As GetCommentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewsCompleted As GetNewsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountObjectCompleted As GetAccountObjectCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetCommentDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCommentDataSet() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCommentDataSet", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCommentDataSetAsync()
            Me.GetCommentDataSetAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCommentDataSetAsync(ByVal userState As Object)
            If (Me.GetCommentDataSetOperationCompleted Is Nothing) Then
                Me.GetCommentDataSetOperationCompleted = AddressOf Me.OnGetCommentDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetCommentDataSet", New Object(-1) {}, Me.GetCommentDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCommentDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCommentDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCommentDataSetCompleted(Me, New GetCommentDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetDealBlotterDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDealBlotterDataSet(ByVal UserID As String, ByVal PWD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDealBlotterDataSet", New Object() {UserID, PWD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String)
            Me.GetDealBlotterDataSetAsync(UserID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.GetDealBlotterDataSetOperationCompleted Is Nothing) Then
                Me.GetDealBlotterDataSetOperationCompleted = AddressOf Me.OnGetDealBlotterDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetDealBlotterDataSet", New Object() {UserID, PWD}, Me.GetDealBlotterDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDealBlotterDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDealBlotterDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDealBlotterDataSetCompleted(Me, New GetDealBlotterDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetDealBlotterDataSetWithFilter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDealBlotterDataSetWithFilter(ByVal UserID As String, ByVal PWD As String, ByVal Status As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDealBlotterDataSetWithFilter", New Object() {UserID, PWD, Status})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterDataSetWithFilterAsync(ByVal UserID As String, ByVal PWD As String, ByVal Status As String)
            Me.GetDealBlotterDataSetWithFilterAsync(UserID, PWD, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterDataSetWithFilterAsync(ByVal UserID As String, ByVal PWD As String, ByVal Status As String, ByVal userState As Object)
            If (Me.GetDealBlotterDataSetWithFilterOperationCompleted Is Nothing) Then
                Me.GetDealBlotterDataSetWithFilterOperationCompleted = AddressOf Me.OnGetDealBlotterDataSetWithFilterOperationCompleted
            End If
            Me.InvokeAsync("GetDealBlotterDataSetWithFilter", New Object() {UserID, PWD, Status}, Me.GetDealBlotterDataSetWithFilterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDealBlotterDataSetWithFilterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDealBlotterDataSetWithFilterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDealBlotterDataSetWithFilterCompleted(Me, New GetDealBlotterDataSetWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetDelayedRatesDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDelayedRatesDataSet() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetDelayedRatesDataSet", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDelayedRatesDataSetAsync()
            Me.GetDelayedRatesDataSetAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDelayedRatesDataSetAsync(ByVal userState As Object)
            If (Me.GetDelayedRatesDataSetOperationCompleted Is Nothing) Then
                Me.GetDelayedRatesDataSetOperationCompleted = AddressOf Me.OnGetDelayedRatesDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetDelayedRatesDataSet", New Object(-1) {}, Me.GetDelayedRatesDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDelayedRatesDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDelayedRatesDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDelayedRatesDataSetCompleted(Me, New GetDelayedRatesDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetMarginBlotterDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarginBlotterDataSet(ByVal UserID As String, ByVal PWD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMarginBlotterDataSet", New Object() {UserID, PWD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarginBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String)
            Me.GetMarginBlotterDataSetAsync(UserID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarginBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.GetMarginBlotterDataSetOperationCompleted Is Nothing) Then
                Me.GetMarginBlotterDataSetOperationCompleted = AddressOf Me.OnGetMarginBlotterDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetMarginBlotterDataSet", New Object() {UserID, PWD}, Me.GetMarginBlotterDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarginBlotterDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarginBlotterDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarginBlotterDataSetCompleted(Me, New GetMarginBlotterDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetNewsDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewsDataSet() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetNewsDataSet", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewsDataSetAsync()
            Me.GetNewsDataSetAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewsDataSetAsync(ByVal userState As Object)
            If (Me.GetNewsDataSetOperationCompleted Is Nothing) Then
                Me.GetNewsDataSetOperationCompleted = AddressOf Me.OnGetNewsDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetNewsDataSet", New Object(-1) {}, Me.GetNewsDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewsDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewsDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewsDataSetCompleted(Me, New GetNewsDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetOrderBlotterDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderBlotterDataSet(ByVal UserID As String, ByVal PWD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOrderBlotterDataSet", New Object() {UserID, PWD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String)
            Me.GetOrderBlotterDataSetAsync(UserID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.GetOrderBlotterDataSetOperationCompleted Is Nothing) Then
                Me.GetOrderBlotterDataSetOperationCompleted = AddressOf Me.OnGetOrderBlotterDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetOrderBlotterDataSet", New Object() {UserID, PWD}, Me.GetOrderBlotterDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderBlotterDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderBlotterDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderBlotterDataSetCompleted(Me, New GetOrderBlotterDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetPositionBlotterDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPositionBlotterDataSet(ByVal UserID As String, ByVal PWD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPositionBlotterDataSet", New Object() {UserID, PWD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPositionBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String)
            Me.GetPositionBlotterDataSetAsync(UserID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPositionBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.GetPositionBlotterDataSetOperationCompleted Is Nothing) Then
                Me.GetPositionBlotterDataSetOperationCompleted = AddressOf Me.OnGetPositionBlotterDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetPositionBlotterDataSet", New Object() {UserID, PWD}, Me.GetPositionBlotterDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPositionBlotterDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPositionBlotterDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPositionBlotterDataSetCompleted(Me, New GetPositionBlotterDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetRatesDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRatesDataSet(ByVal Key As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRatesDataSet", New Object() {Key})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRatesDataSetAsync(ByVal Key As String)
            Me.GetRatesDataSetAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRatesDataSetAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetRatesDataSetOperationCompleted Is Nothing) Then
                Me.GetRatesDataSetOperationCompleted = AddressOf Me.OnGetRatesDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetRatesDataSet", New Object() {Key}, Me.GetRatesDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRatesDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRatesDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRatesDataSetCompleted(Me, New GetRatesDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetHistoricRatesDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHistoricRatesDataSet(ByVal Key As String, ByVal Quote As String, ByVal StartDateTime As String, ByVal EndDateTime As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHistoricRatesDataSet", New Object() {Key, Quote, StartDateTime, EndDateTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHistoricRatesDataSetAsync(ByVal Key As String, ByVal Quote As String, ByVal StartDateTime As String, ByVal EndDateTime As String)
            Me.GetHistoricRatesDataSetAsync(Key, Quote, StartDateTime, EndDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHistoricRatesDataSetAsync(ByVal Key As String, ByVal Quote As String, ByVal StartDateTime As String, ByVal EndDateTime As String, ByVal userState As Object)
            If (Me.GetHistoricRatesDataSetOperationCompleted Is Nothing) Then
                Me.GetHistoricRatesDataSetOperationCompleted = AddressOf Me.OnGetHistoricRatesDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetHistoricRatesDataSet", New Object() {Key, Quote, StartDateTime, EndDateTime}, Me.GetHistoricRatesDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHistoricRatesDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHistoricRatesDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHistoricRatesDataSetCompleted(Me, New GetHistoricRatesDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetSymbolBlotterDataSet", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSymbolBlotterDataSet(ByVal UserID As String, ByVal PWD As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSymbolBlotterDataSet", New Object() {UserID, PWD})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSymbolBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String)
            Me.GetSymbolBlotterDataSetAsync(UserID, PWD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSymbolBlotterDataSetAsync(ByVal UserID As String, ByVal PWD As String, ByVal userState As Object)
            If (Me.GetSymbolBlotterDataSetOperationCompleted Is Nothing) Then
                Me.GetSymbolBlotterDataSetOperationCompleted = AddressOf Me.OnGetSymbolBlotterDataSetOperationCompleted
            End If
            Me.InvokeAsync("GetSymbolBlotterDataSet", New Object() {UserID, PWD}, Me.GetSymbolBlotterDataSetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSymbolBlotterDataSetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSymbolBlotterDataSetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSymbolBlotterDataSetCompleted(Me, New GetSymbolBlotterDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetTicker", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTicker(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Accounttype As String, ByVal Lang As String) As String
            Dim results() As Object = Me.Invoke("GetTicker", New Object() {UserId, PWD, Brand, Accounttype, Lang})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTickerAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Accounttype As String, ByVal Lang As String)
            Me.GetTickerAsync(UserId, PWD, Brand, Accounttype, Lang, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTickerAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Accounttype As String, ByVal Lang As String, ByVal userState As Object)
            If (Me.GetTickerOperationCompleted Is Nothing) Then
                Me.GetTickerOperationCompleted = AddressOf Me.OnGetTickerOperationCompleted
            End If
            Me.InvokeAsync("GetTicker", New Object() {UserId, PWD, Brand, Accounttype, Lang}, Me.GetTickerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTickerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTickerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTickerCompleted(Me, New GetTickerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetEconomicCalendar", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEconomicCalendar(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Lang As String) As String
            Dim results() As Object = Me.Invoke("GetEconomicCalendar", New Object() {UserId, PWD, Brand, Lang})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEconomicCalendarAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Lang As String)
            Me.GetEconomicCalendarAsync(UserId, PWD, Brand, Lang, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEconomicCalendarAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal Lang As String, ByVal userState As Object)
            If (Me.GetEconomicCalendarOperationCompleted Is Nothing) Then
                Me.GetEconomicCalendarOperationCompleted = AddressOf Me.OnGetEconomicCalendarOperationCompleted
            End If
            Me.InvokeAsync("GetEconomicCalendar", New Object() {UserId, PWD, Brand, Lang}, Me.GetEconomicCalendarOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEconomicCalendarOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEconomicCalendarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEconomicCalendarCompleted(Me, New GetEconomicCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetAccount", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccount(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String) As String
            Dim results() As Object = Me.Invoke("GetAccount", New Object() {UserID, PWD, Brand})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String)
            Me.GetAccountAsync(UserID, PWD, Brand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal userState As Object)
            If (Me.GetAccountOperationCompleted Is Nothing) Then
                Me.GetAccountOperationCompleted = AddressOf Me.OnGetAccountOperationCompleted
            End If
            Me.InvokeAsync("GetAccount", New Object() {UserID, PWD, Brand}, Me.GetAccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountCompleted(Me, New GetAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetAccountServices", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountServices(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String) As String
            Dim results() As Object = Me.Invoke("GetAccountServices", New Object() {UserID, PWD, Brand})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountServicesAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String)
            Me.GetAccountServicesAsync(UserID, PWD, Brand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountServicesAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal userState As Object)
            If (Me.GetAccountServicesOperationCompleted Is Nothing) Then
                Me.GetAccountServicesOperationCompleted = AddressOf Me.OnGetAccountServicesOperationCompleted
            End If
            Me.InvokeAsync("GetAccountServices", New Object() {UserID, PWD, Brand}, Me.GetAccountServicesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountServicesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountServicesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountServicesCompleted(Me, New GetAccountServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetDealBlotter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDealBlotter(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("GetDealBlotter", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterAsync(ByVal Key As String)
            Me.GetDealBlotterAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetDealBlotterOperationCompleted Is Nothing) Then
                Me.GetDealBlotterOperationCompleted = AddressOf Me.OnGetDealBlotterOperationCompleted
            End If
            Me.InvokeAsync("GetDealBlotter", New Object() {Key}, Me.GetDealBlotterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDealBlotterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDealBlotterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDealBlotterCompleted(Me, New GetDealBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetDealBlotterWithFilter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDealBlotterWithFilter(ByVal Key As String, ByVal Status As String) As String
            Dim results() As Object = Me.Invoke("GetDealBlotterWithFilter", New Object() {Key, Status})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterWithFilterAsync(ByVal Key As String, ByVal Status As String)
            Me.GetDealBlotterWithFilterAsync(Key, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDealBlotterWithFilterAsync(ByVal Key As String, ByVal Status As String, ByVal userState As Object)
            If (Me.GetDealBlotterWithFilterOperationCompleted Is Nothing) Then
                Me.GetDealBlotterWithFilterOperationCompleted = AddressOf Me.OnGetDealBlotterWithFilterOperationCompleted
            End If
            Me.InvokeAsync("GetDealBlotterWithFilter", New Object() {Key, Status}, Me.GetDealBlotterWithFilterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDealBlotterWithFilterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDealBlotterWithFilterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDealBlotterWithFilterCompleted(Me, New GetDealBlotterWithFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetMarginBlotter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarginBlotter(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("GetMarginBlotter", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarginBlotterAsync(ByVal Key As String)
            Me.GetMarginBlotterAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarginBlotterAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetMarginBlotterOperationCompleted Is Nothing) Then
                Me.GetMarginBlotterOperationCompleted = AddressOf Me.OnGetMarginBlotterOperationCompleted
            End If
            Me.InvokeAsync("GetMarginBlotter", New Object() {Key}, Me.GetMarginBlotterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarginBlotterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarginBlotterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarginBlotterCompleted(Me, New GetMarginBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetOrderBlotter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderBlotter(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("GetOrderBlotter", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderBlotterAsync(ByVal Key As String)
            Me.GetOrderBlotterAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderBlotterAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetOrderBlotterOperationCompleted Is Nothing) Then
                Me.GetOrderBlotterOperationCompleted = AddressOf Me.OnGetOrderBlotterOperationCompleted
            End If
            Me.InvokeAsync("GetOrderBlotter", New Object() {Key}, Me.GetOrderBlotterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderBlotterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderBlotterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderBlotterCompleted(Me, New GetOrderBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetPositionBlotter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPositionBlotter(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("GetPositionBlotter", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPositionBlotterAsync(ByVal Key As String)
            Me.GetPositionBlotterAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPositionBlotterAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetPositionBlotterOperationCompleted Is Nothing) Then
                Me.GetPositionBlotterOperationCompleted = AddressOf Me.OnGetPositionBlotterOperationCompleted
            End If
            Me.InvokeAsync("GetPositionBlotter", New Object() {Key}, Me.GetPositionBlotterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPositionBlotterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPositionBlotterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPositionBlotterCompleted(Me, New GetPositionBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetSymbolBlotter", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSymbolBlotter(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("GetSymbolBlotter", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSymbolBlotterAsync(ByVal Key As String)
            Me.GetSymbolBlotterAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSymbolBlotterAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.GetSymbolBlotterOperationCompleted Is Nothing) Then
                Me.GetSymbolBlotterOperationCompleted = AddressOf Me.OnGetSymbolBlotterOperationCompleted
            End If
            Me.InvokeAsync("GetSymbolBlotter", New Object() {Key}, Me.GetSymbolBlotterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSymbolBlotterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSymbolBlotterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSymbolBlotterCompleted(Me, New GetSymbolBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetPairSettings", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPairSettings(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String) As String
            Dim results() As Object = Me.Invoke("GetPairSettings", New Object() {UserId, PWD, Brand})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPairSettingsAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String)
            Me.GetPairSettingsAsync(UserId, PWD, Brand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPairSettingsAsync(ByVal UserId As String, ByVal PWD As String, ByVal Brand As String, ByVal userState As Object)
            If (Me.GetPairSettingsOperationCompleted Is Nothing) Then
                Me.GetPairSettingsOperationCompleted = AddressOf Me.OnGetPairSettingsOperationCompleted
            End If
            Me.InvokeAsync("GetPairSettings", New Object() {UserId, PWD, Brand}, Me.GetPairSettingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPairSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPairSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPairSettingsCompleted(Me, New GetPairSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceSingleOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceSingleOrder(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceSingleOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceSingleOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String)
            Me.PlaceSingleOrderAsync(UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceSingleOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal userState As Object)
            If (Me.PlaceSingleOrderOperationCompleted Is Nothing) Then
                Me.PlaceSingleOrderOperationCompleted = AddressOf Me.OnPlaceSingleOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceSingleOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis}, Me.PlaceSingleOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceSingleOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceSingleOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceSingleOrderCompleted(Me, New PlaceSingleOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifySingleOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifySingleOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifySingleOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifySingleOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String)
            Me.ModifySingleOrderAsync(UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifySingleOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal userState As Object)
            If (Me.ModifySingleOrderOperationCompleted Is Nothing) Then
                Me.ModifySingleOrderOperationCompleted = AddressOf Me.OnModifySingleOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifySingleOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis}, Me.ModifySingleOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifySingleOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifySingleOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifySingleOrderCompleted(Me, New ModifySingleOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceOCOOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceOCOOrder(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceOCOOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceOCOOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String)
            Me.PlaceOCOOrderAsync(UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceOCOOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String, ByVal userState As Object)
            If (Me.PlaceOCOOrderOperationCompleted Is Nothing) Then
                Me.PlaceOCOOrderOperationCompleted = AddressOf Me.OnPlaceOCOOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceOCOOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1}, Me.PlaceOCOOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceOCOOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceOCOOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceOCOOrderCompleted(Me, New PlaceOCOOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifyOCOOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyOCOOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifyOCOOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyOCOOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String)
            Me.ModifyOCOOrderAsync(UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyOCOOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String, ByVal userState As Object)
            If (Me.ModifyOCOOrderOperationCompleted Is Nothing) Then
                Me.ModifyOCOOrderOperationCompleted = AddressOf Me.OnModifyOCOOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifyOCOOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1}, Me.ModifyOCOOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyOCOOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyOCOOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyOCOOrderCompleted(Me, New ModifyOCOOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/CancelOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderConfirmation As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("CancelOrder", New Object() {UserID, PWD, OrderConfirmation})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderConfirmation As String)
            Me.CancelOrderAsync(UserID, PWD, OrderConfirmation, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderConfirmation As String, ByVal userState As Object)
            If (Me.CancelOrderOperationCompleted Is Nothing) Then
                Me.CancelOrderOperationCompleted = AddressOf Me.OnCancelOrderOperationCompleted
            End If
            Me.InvokeAsync("CancelOrder", New Object() {UserID, PWD, OrderConfirmation}, Me.CancelOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelOrderCompleted(Me, New CancelOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/DealRequest", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DealRequest(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String) As objDealResponse
            Dim results() As Object = Me.Invoke("DealRequest", New Object() {UserID, PWD, Pair, BuySell, Amount, Rate})
            Return CType(results(0),objDealResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DealRequestAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String)
            Me.DealRequestAsync(UserID, PWD, Pair, BuySell, Amount, Rate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DealRequestAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal userState As Object)
            If (Me.DealRequestOperationCompleted Is Nothing) Then
                Me.DealRequestOperationCompleted = AddressOf Me.OnDealRequestOperationCompleted
            End If
            Me.InvokeAsync("DealRequest", New Object() {UserID, PWD, Pair, BuySell, Amount, Rate}, Me.DealRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDealRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DealRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DealRequestCompleted(Me, New DealRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/DealRequestByDealId", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DealRequestByDealId(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal DealID As String) As objDealResponse
            Dim results() As Object = Me.Invoke("DealRequestByDealId", New Object() {UserID, PWD, Pair, BuySell, Amount, Rate, DealID})
            Return CType(results(0),objDealResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DealRequestByDealIdAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal DealID As String)
            Me.DealRequestByDealIdAsync(UserID, PWD, Pair, BuySell, Amount, Rate, DealID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DealRequestByDealIdAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal DealID As String, ByVal userState As Object)
            If (Me.DealRequestByDealIdOperationCompleted Is Nothing) Then
                Me.DealRequestByDealIdOperationCompleted = AddressOf Me.OnDealRequestByDealIdOperationCompleted
            End If
            Me.InvokeAsync("DealRequestByDealId", New Object() {UserID, PWD, Pair, BuySell, Amount, Rate, DealID}, Me.DealRequestByDealIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDealRequestByDealIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DealRequestByDealIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DealRequestByDealIdCompleted(Me, New DealRequestByDealIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/DealRequestAtBest", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DealRequestAtBest(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String) As objDealResponse
            Dim results() As Object = Me.Invoke("DealRequestAtBest", New Object() {UserID, PWD, Pair, BuySell, Amount})
            Return CType(results(0),objDealResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DealRequestAtBestAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String)
            Me.DealRequestAtBestAsync(UserID, PWD, Pair, BuySell, Amount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DealRequestAtBestAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal BuySell As String, ByVal Amount As String, ByVal userState As Object)
            If (Me.DealRequestAtBestOperationCompleted Is Nothing) Then
                Me.DealRequestAtBestOperationCompleted = AddressOf Me.OnDealRequestAtBestOperationCompleted
            End If
            Me.InvokeAsync("DealRequestAtBest", New Object() {UserID, PWD, Pair, BuySell, Amount}, Me.DealRequestAtBestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDealRequestAtBestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DealRequestAtBestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DealRequestAtBestCompleted(Me, New DealRequestAtBestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/CancelOrderByOrderID", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelOrderByOrderID(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("CancelOrderByOrderID", New Object() {UserID, PWD, OrderReference})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelOrderByOrderIDAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String)
            Me.CancelOrderByOrderIDAsync(UserID, PWD, OrderReference, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelOrderByOrderIDAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal userState As Object)
            If (Me.CancelOrderByOrderIDOperationCompleted Is Nothing) Then
                Me.CancelOrderByOrderIDOperationCompleted = AddressOf Me.OnCancelOrderByOrderIDOperationCompleted
            End If
            Me.InvokeAsync("CancelOrderByOrderID", New Object() {UserID, PWD, OrderReference}, Me.CancelOrderByOrderIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelOrderByOrderIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelOrderByOrderIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelOrderByOrderIDCompleted(Me, New CancelOrderByOrderIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceIfThenOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceIfThenOrder(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceIfThenOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceIfThenOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String)
            Me.PlaceIfThenOrderAsync(UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceIfThenOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String, ByVal userState As Object)
            If (Me.PlaceIfThenOrderOperationCompleted Is Nothing) Then
                Me.PlaceIfThenOrderOperationCompleted = AddressOf Me.OnPlaceIfThenOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceIfThenOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1}, Me.PlaceIfThenOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceIfThenOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceIfThenOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceIfThenOrderCompleted(Me, New PlaceIfThenOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifyIfThenOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyIfThenOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifyIfThenOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyIfThenOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String)
            Me.ModifyIfThenOrderAsync(UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyIfThenOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Expiry As String, ByVal BuySell As String, ByVal Amount As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal BuySell1 As String, ByVal Amount1 As String, ByVal Rate1 As String, ByVal OrderBasis1 As String, ByVal userState As Object)
            If (Me.ModifyIfThenOrderOperationCompleted Is Nothing) Then
                Me.ModifyIfThenOrderOperationCompleted = AddressOf Me.OnModifyIfThenOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifyIfThenOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1}, Me.ModifyIfThenOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyIfThenOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyIfThenOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyIfThenOrderCompleted(Me, New ModifyIfThenOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceIfThenOCOOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceIfThenOCOOrder( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal Pair As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceIfThenOCOOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceIfThenOCOOrderAsync( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal Pair As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String)
            Me.PlaceIfThenOCOOrderAsync(UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceIfThenOCOOrderAsync( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal Pair As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String,  _
                    ByVal userState As Object)
            If (Me.PlaceIfThenOCOOrderOperationCompleted Is Nothing) Then
                Me.PlaceIfThenOCOOrderOperationCompleted = AddressOf Me.OnPlaceIfThenOCOOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceIfThenOCOOrder", New Object() {UserID, PWD, Pair, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2}, Me.PlaceIfThenOCOOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceIfThenOCOOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceIfThenOCOOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceIfThenOCOOrderCompleted(Me, New PlaceIfThenOCOOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifyIfThenOCOOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyIfThenOCOOrder( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal OrderReference As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifyIfThenOCOOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyIfThenOCOOrderAsync( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal OrderReference As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String)
            Me.ModifyIfThenOCOOrderAsync(UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyIfThenOCOOrderAsync( _
                    ByVal UserID As String,  _
                    ByVal PWD As String,  _
                    ByVal OrderReference As String,  _
                    ByVal Expiry As String,  _
                    ByVal BuySell As String,  _
                    ByVal Amount As String,  _
                    ByVal Rate As String,  _
                    ByVal OrderBasis As String,  _
                    ByVal BuySell1 As String,  _
                    ByVal Amount1 As String,  _
                    ByVal Rate1 As String,  _
                    ByVal OrderBasis1 As String,  _
                    ByVal BuySell2 As String,  _
                    ByVal Amount2 As String,  _
                    ByVal Rate2 As String,  _
                    ByVal OrderBasis2 As String,  _
                    ByVal userState As Object)
            If (Me.ModifyIfThenOCOOrderOperationCompleted Is Nothing) Then
                Me.ModifyIfThenOCOOrderOperationCompleted = AddressOf Me.OnModifyIfThenOCOOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifyIfThenOCOOrder", New Object() {UserID, PWD, OrderReference, Expiry, BuySell, Amount, Rate, OrderBasis, BuySell1, Amount1, Rate1, OrderBasis1, BuySell2, Amount2, Rate2, OrderBasis2}, Me.ModifyIfThenOCOOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyIfThenOCOOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyIfThenOCOOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyIfThenOCOOrderCompleted(Me, New ModifyIfThenOCOOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceSingleASSPOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceSingleASSPOrder(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Rate As String, ByVal OrderBasis As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceSingleASSPOrder", New Object() {UserID, PWD, Pair, Rate, OrderBasis})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceSingleASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Rate As String, ByVal OrderBasis As String)
            Me.PlaceSingleASSPOrderAsync(UserID, PWD, Pair, Rate, OrderBasis, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceSingleASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal userState As Object)
            If (Me.PlaceSingleASSPOrderOperationCompleted Is Nothing) Then
                Me.PlaceSingleASSPOrderOperationCompleted = AddressOf Me.OnPlaceSingleASSPOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceSingleASSPOrder", New Object() {UserID, PWD, Pair, Rate, OrderBasis}, Me.PlaceSingleASSPOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceSingleASSPOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceSingleASSPOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceSingleASSPOrderCompleted(Me, New PlaceSingleASSPOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifySingleASSPOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifySingleASSPOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Rate As String, ByVal OrderBasis As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifySingleASSPOrder", New Object() {UserID, PWD, OrderReference, Rate, OrderBasis})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifySingleASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Rate As String, ByVal OrderBasis As String)
            Me.ModifySingleASSPOrderAsync(UserID, PWD, OrderReference, Rate, OrderBasis, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifySingleASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal Rate As String, ByVal OrderBasis As String, ByVal userState As Object)
            If (Me.ModifySingleASSPOrderOperationCompleted Is Nothing) Then
                Me.ModifySingleASSPOrderOperationCompleted = AddressOf Me.OnModifySingleASSPOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifySingleASSPOrder", New Object() {UserID, PWD, OrderReference, Rate, OrderBasis}, Me.ModifySingleASSPOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifySingleASSPOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifySingleASSPOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifySingleASSPOrderCompleted(Me, New ModifySingleASSPOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/PlaceOCOASSPOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceOCOASSPOrder(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal LimitRate As String, ByVal StopLossRate As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("PlaceOCOASSPOrder", New Object() {UserID, PWD, Pair, LimitRate, StopLossRate})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceOCOASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal LimitRate As String, ByVal StopLossRate As String)
            Me.PlaceOCOASSPOrderAsync(UserID, PWD, Pair, LimitRate, StopLossRate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceOCOASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal Pair As String, ByVal LimitRate As String, ByVal StopLossRate As String, ByVal userState As Object)
            If (Me.PlaceOCOASSPOrderOperationCompleted Is Nothing) Then
                Me.PlaceOCOASSPOrderOperationCompleted = AddressOf Me.OnPlaceOCOASSPOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceOCOASSPOrder", New Object() {UserID, PWD, Pair, LimitRate, StopLossRate}, Me.PlaceOCOASSPOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceOCOASSPOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceOCOASSPOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceOCOASSPOrderCompleted(Me, New PlaceOCOASSPOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/ModifyOCOASSPOrder", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ModifyOCOASSPOrder(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal LimitRate As String, ByVal StopLossRate As String) As objPlaceOrderResponse
            Dim results() As Object = Me.Invoke("ModifyOCOASSPOrder", New Object() {UserID, PWD, OrderReference, LimitRate, StopLossRate})
            Return CType(results(0),objPlaceOrderResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModifyOCOASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal LimitRate As String, ByVal StopLossRate As String)
            Me.ModifyOCOASSPOrderAsync(UserID, PWD, OrderReference, LimitRate, StopLossRate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModifyOCOASSPOrderAsync(ByVal UserID As String, ByVal PWD As String, ByVal OrderReference As String, ByVal LimitRate As String, ByVal StopLossRate As String, ByVal userState As Object)
            If (Me.ModifyOCOASSPOrderOperationCompleted Is Nothing) Then
                Me.ModifyOCOASSPOrderOperationCompleted = AddressOf Me.OnModifyOCOASSPOrderOperationCompleted
            End If
            Me.InvokeAsync("ModifyOCOASSPOrder", New Object() {UserID, PWD, OrderReference, LimitRate, StopLossRate}, Me.ModifyOCOASSPOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnModifyOCOASSPOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModifyOCOASSPOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModifyOCOASSPOrderCompleted(Me, New ModifyOCOASSPOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/Echo", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Echo(ByVal Message As String) As String
            Dim results() As Object = Me.Invoke("Echo", New Object() {Message})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EchoAsync(ByVal Message As String)
            Me.EchoAsync(Message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EchoAsync(ByVal Message As String, ByVal userState As Object)
            If (Me.EchoOperationCompleted Is Nothing) Then
                Me.EchoOperationCompleted = AddressOf Me.OnEchoOperationCompleted
            End If
            Me.InvokeAsync("Echo", New Object() {Message}, Me.EchoOperationCompleted, userState)
        End Sub
        
        Private Sub OnEchoOperationCompleted(ByVal arg As Object)
            If (Not (Me.EchoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EchoCompleted(Me, New EchoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetTime", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTime() As String
            Dim results() As Object = Me.Invoke("GetTime", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTimeAsync()
            Me.GetTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTimeAsync(ByVal userState As Object)
            If (Me.GetTimeOperationCompleted Is Nothing) Then
                Me.GetTimeOperationCompleted = AddressOf Me.OnGetTimeOperationCompleted
            End If
            Me.InvokeAsync("GetTime", New Object(-1) {}, Me.GetTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTimeCompleted(Me, New GetTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetRatesServerAuth", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRatesServerAuth(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String) As String
            Dim results() As Object = Me.Invoke("GetRatesServerAuth", New Object() {UserID, PWD, Brand})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRatesServerAuthAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String)
            Me.GetRatesServerAuthAsync(UserID, PWD, Brand, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRatesServerAuthAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal userState As Object)
            If (Me.GetRatesServerAuthOperationCompleted Is Nothing) Then
                Me.GetRatesServerAuthOperationCompleted = AddressOf Me.OnGetRatesServerAuthOperationCompleted
            End If
            Me.InvokeAsync("GetRatesServerAuth", New Object() {UserID, PWD, Brand}, Me.GetRatesServerAuthOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRatesServerAuthOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRatesServerAuthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRatesServerAuthCompleted(Me, New GetRatesServerAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetSubAccountAuthenticationKey", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubAccountAuthenticationKey(ByVal MasterAccountKey As String, ByVal SubAccountCode As String) As String
            Dim results() As Object = Me.Invoke("GetSubAccountAuthenticationKey", New Object() {MasterAccountKey, SubAccountCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubAccountAuthenticationKeyAsync(ByVal MasterAccountKey As String, ByVal SubAccountCode As String)
            Me.GetSubAccountAuthenticationKeyAsync(MasterAccountKey, SubAccountCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubAccountAuthenticationKeyAsync(ByVal MasterAccountKey As String, ByVal SubAccountCode As String, ByVal userState As Object)
            If (Me.GetSubAccountAuthenticationKeyOperationCompleted Is Nothing) Then
                Me.GetSubAccountAuthenticationKeyOperationCompleted = AddressOf Me.OnGetSubAccountAuthenticationKeyOperationCompleted
            End If
            Me.InvokeAsync("GetSubAccountAuthenticationKey", New Object() {MasterAccountKey, SubAccountCode}, Me.GetSubAccountAuthenticationKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubAccountAuthenticationKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubAccountAuthenticationKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubAccountAuthenticationKeyCompleted(Me, New GetSubAccountAuthenticationKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetComment", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComment() As objMarketText
            Dim results() As Object = Me.Invoke("GetComment", New Object(-1) {})
            Return CType(results(0),objMarketText)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCommentAsync()
            Me.GetCommentAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCommentAsync(ByVal userState As Object)
            If (Me.GetCommentOperationCompleted Is Nothing) Then
                Me.GetCommentOperationCompleted = AddressOf Me.OnGetCommentOperationCompleted
            End If
            Me.InvokeAsync("GetComment", New Object(-1) {}, Me.GetCommentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCommentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCommentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCommentCompleted(Me, New GetCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetNews", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNews() As objMarketText
            Dim results() As Object = Me.Invoke("GetNews", New Object(-1) {})
            Return CType(results(0),objMarketText)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewsAsync()
            Me.GetNewsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewsAsync(ByVal userState As Object)
            If (Me.GetNewsOperationCompleted Is Nothing) Then
                Me.GetNewsOperationCompleted = AddressOf Me.OnGetNewsOperationCompleted
            End If
            Me.InvokeAsync("GetNews", New Object(-1) {}, Me.GetNewsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewsCompleted(Me, New GetNewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://api.efxnow.com/webservices2.3/GetAccountObject", RequestNamespace:="https://api.efxnow.com/webservices2.3", ResponseNamespace:="https://api.efxnow.com/webservices2.3", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountObject(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal Notes As String) As objAccount
            Dim results() As Object = Me.Invoke("GetAccountObject", New Object() {UserID, PWD, Brand, Notes})
            Return CType(results(0),objAccount)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountObjectAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal Notes As String)
            Me.GetAccountObjectAsync(UserID, PWD, Brand, Notes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountObjectAsync(ByVal UserID As String, ByVal PWD As String, ByVal Brand As String, ByVal Notes As String, ByVal userState As Object)
            If (Me.GetAccountObjectOperationCompleted Is Nothing) Then
                Me.GetAccountObjectOperationCompleted = AddressOf Me.OnGetAccountObjectOperationCompleted
            End If
            Me.InvokeAsync("GetAccountObject", New Object() {UserID, PWD, Brand, Notes}, Me.GetAccountObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountObjectCompleted(Me, New GetAccountObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://api.efxnow.com/webservices2.3")>  _
    Partial Public Class objPlaceOrderResponse
        
        Private successField As Boolean
        
        Private errorDescriptionField As String
        
        Private errorNumberField As Integer
        
        Private customerOrderReferenceField As Long
        
        Private orderConfirmationField As String
        
        Private customerDealRefField As String
        
        '''<remarks/>
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorDescription() As String
            Get
                Return Me.errorDescriptionField
            End Get
            Set
                Me.errorDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorNumber() As Integer
            Get
                Return Me.errorNumberField
            End Get
            Set
                Me.errorNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerOrderReference() As Long
            Get
                Return Me.customerOrderReferenceField
            End Get
            Set
                Me.customerOrderReferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderConfirmation() As String
            Get
                Return Me.orderConfirmationField
            End Get
            Set
                Me.orderConfirmationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerDealRef() As String
            Get
                Return Me.customerDealRefField
            End Get
            Set
                Me.customerDealRefField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://api.efxnow.com/webservices2.3")>  _
    Partial Public Class objAccount
        
        Private successField As Boolean
        
        Private errorDescriptionField As String
        
        Private custCodeField As String
        
        Private gUIDField As String
        
        Private featuresField As Integer
        
        Private baseCCYField As String
        
        Private lastOrderSeqField As Long
        
        Private lastDealSeqField As Long
        
        Private orderLotSizeField As Integer
        
        Private maxOrderPipsField As Double
        
        Private cancelOrderPipsField As Double
        
        Private tradeLotSizeField As Integer
        
        Private maxTradeLotsField As Integer
        
        Private tierCountField As Integer
        
        Private tier1MinLotsField As Integer
        
        Private tier1MaxLotsField As Integer
        
        Private tier1PipDifferenceField As Integer
        
        Private tier2MinLotsField As Integer
        
        Private tier2MaxLotsField As Integer
        
        Private tier2PipDifferenceField As Integer
        
        Private tier3MinLotsField As Integer
        
        Private tier3MaxLotsField As Integer
        
        Private tier3PipDifferenceField As Integer
        
        '''<remarks/>
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorDescription() As String
            Get
                Return Me.errorDescriptionField
            End Get
            Set
                Me.errorDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustCode() As String
            Get
                Return Me.custCodeField
            End Get
            Set
                Me.custCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GUID() As String
            Get
                Return Me.gUIDField
            End Get
            Set
                Me.gUIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Features() As Integer
            Get
                Return Me.featuresField
            End Get
            Set
                Me.featuresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BaseCCY() As String
            Get
                Return Me.baseCCYField
            End Get
            Set
                Me.baseCCYField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastOrderSeq() As Long
            Get
                Return Me.lastOrderSeqField
            End Get
            Set
                Me.lastOrderSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastDealSeq() As Long
            Get
                Return Me.lastDealSeqField
            End Get
            Set
                Me.lastDealSeqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OrderLotSize() As Integer
            Get
                Return Me.orderLotSizeField
            End Get
            Set
                Me.orderLotSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxOrderPips() As Double
            Get
                Return Me.maxOrderPipsField
            End Get
            Set
                Me.maxOrderPipsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CancelOrderPips() As Double
            Get
                Return Me.cancelOrderPipsField
            End Get
            Set
                Me.cancelOrderPipsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TradeLotSize() As Integer
            Get
                Return Me.tradeLotSizeField
            End Get
            Set
                Me.tradeLotSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxTradeLots() As Integer
            Get
                Return Me.maxTradeLotsField
            End Get
            Set
                Me.maxTradeLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TierCount() As Integer
            Get
                Return Me.tierCountField
            End Get
            Set
                Me.tierCountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier1MinLots() As Integer
            Get
                Return Me.tier1MinLotsField
            End Get
            Set
                Me.tier1MinLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier1MaxLots() As Integer
            Get
                Return Me.tier1MaxLotsField
            End Get
            Set
                Me.tier1MaxLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier1PipDifference() As Integer
            Get
                Return Me.tier1PipDifferenceField
            End Get
            Set
                Me.tier1PipDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier2MinLots() As Integer
            Get
                Return Me.tier2MinLotsField
            End Get
            Set
                Me.tier2MinLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier2MaxLots() As Integer
            Get
                Return Me.tier2MaxLotsField
            End Get
            Set
                Me.tier2MaxLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier2PipDifference() As Integer
            Get
                Return Me.tier2PipDifferenceField
            End Get
            Set
                Me.tier2PipDifferenceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier3MinLots() As Integer
            Get
                Return Me.tier3MinLotsField
            End Get
            Set
                Me.tier3MinLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier3MaxLots() As Integer
            Get
                Return Me.tier3MaxLotsField
            End Get
            Set
                Me.tier3MaxLotsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier3PipDifference() As Integer
            Get
                Return Me.tier3PipDifferenceField
            End Get
            Set
                Me.tier3PipDifferenceField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://api.efxnow.com/webservices2.3")>  _
    Partial Public Class objMarketText
        
        Private successField As Boolean
        
        Private errorDescriptionField As String
        
        Private item0Field As String
        
        Private item1Field As String
        
        Private item2Field As String
        
        '''<remarks/>
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorDescription() As String
            Get
                Return Me.errorDescriptionField
            End Get
            Set
                Me.errorDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item0() As String
            Get
                Return Me.item0Field
            End Get
            Set
                Me.item0Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item1() As String
            Get
                Return Me.item1Field
            End Get
            Set
                Me.item1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item2() As String
            Get
                Return Me.item2Field
            End Get
            Set
                Me.item2Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://api.efxnow.com/webservices2.3")>  _
    Partial Public Class objDealResponse
        
        Private successField As Boolean
        
        Private errorDescriptionField As String
        
        Private errorNumberField As Integer
        
        Private confirmationField As String
        
        Private confirmationNumberField As String
        
        Private rateField As Double
        
        '''<remarks/>
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorDescription() As String
            Get
                Return Me.errorDescriptionField
            End Get
            Set
                Me.errorDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorNumber() As Integer
            Get
                Return Me.errorNumberField
            End Get
            Set
                Me.errorNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Confirmation() As String
            Get
                Return Me.confirmationField
            End Get
            Set
                Me.confirmationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConfirmationNumber() As String
            Get
                Return Me.confirmationNumberField
            End Get
            Set
                Me.confirmationNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rate() As Double
            Get
                Return Me.rateField
            End Get
            Set
                Me.rateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCommentDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetCommentDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCommentDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDealBlotterDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetDealBlotterDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDealBlotterDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDealBlotterDataSetWithFilterCompletedEventHandler(ByVal sender As Object, ByVal e As GetDealBlotterDataSetWithFilterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDealBlotterDataSetWithFilterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDelayedRatesDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetDelayedRatesDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDelayedRatesDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMarginBlotterDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarginBlotterDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarginBlotterDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetNewsDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewsDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewsDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOrderBlotterDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderBlotterDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderBlotterDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPositionBlotterDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetPositionBlotterDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPositionBlotterDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRatesDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetRatesDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRatesDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetHistoricRatesDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetHistoricRatesDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHistoricRatesDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSymbolBlotterDataSetCompletedEventHandler(ByVal sender As Object, ByVal e As GetSymbolBlotterDataSetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSymbolBlotterDataSetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTickerCompletedEventHandler(ByVal sender As Object, ByVal e As GetTickerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTickerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEconomicCalendarCompletedEventHandler(ByVal sender As Object, ByVal e As GetEconomicCalendarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEconomicCalendarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAccountServicesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountServicesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountServicesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDealBlotterCompletedEventHandler(ByVal sender As Object, ByVal e As GetDealBlotterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDealBlotterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDealBlotterWithFilterCompletedEventHandler(ByVal sender As Object, ByVal e As GetDealBlotterWithFilterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDealBlotterWithFilterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetMarginBlotterCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarginBlotterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarginBlotterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetOrderBlotterCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderBlotterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderBlotterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPositionBlotterCompletedEventHandler(ByVal sender As Object, ByVal e As GetPositionBlotterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPositionBlotterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSymbolBlotterCompletedEventHandler(ByVal sender As Object, ByVal e As GetSymbolBlotterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSymbolBlotterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPairSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPairSettingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPairSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceSingleOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceSingleOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceSingleOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifySingleOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifySingleOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifySingleOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceOCOOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceOCOOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceOCOOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifyOCOOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyOCOOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyOCOOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelOrderCompletedEventHandler(ByVal sender As Object, ByVal e As CancelOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DealRequestCompletedEventHandler(ByVal sender As Object, ByVal e As DealRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DealRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objDealResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objDealResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DealRequestByDealIdCompletedEventHandler(ByVal sender As Object, ByVal e As DealRequestByDealIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DealRequestByDealIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objDealResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objDealResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DealRequestAtBestCompletedEventHandler(ByVal sender As Object, ByVal e As DealRequestAtBestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DealRequestAtBestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objDealResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objDealResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CancelOrderByOrderIDCompletedEventHandler(ByVal sender As Object, ByVal e As CancelOrderByOrderIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelOrderByOrderIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceIfThenOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceIfThenOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceIfThenOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifyIfThenOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyIfThenOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyIfThenOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceIfThenOCOOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceIfThenOCOOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceIfThenOCOOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifyIfThenOCOOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyIfThenOCOOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyIfThenOCOOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceSingleASSPOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceSingleASSPOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceSingleASSPOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifySingleASSPOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifySingleASSPOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifySingleASSPOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PlaceOCOASSPOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceOCOASSPOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceOCOASSPOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ModifyOCOASSPOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ModifyOCOASSPOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModifyOCOASSPOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objPlaceOrderResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objPlaceOrderResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub EchoCompletedEventHandler(ByVal sender As Object, ByVal e As EchoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EchoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRatesServerAuthCompletedEventHandler(ByVal sender As Object, ByVal e As GetRatesServerAuthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRatesServerAuthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSubAccountAuthenticationKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubAccountAuthenticationKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubAccountAuthenticationKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCommentCompletedEventHandler(ByVal sender As Object, ByVal e As GetCommentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCommentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objMarketText
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objMarketText)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetNewsCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objMarketText
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objMarketText)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAccountObjectCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As objAccount
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),objAccount)
            End Get
        End Property
    End Class
End Namespace
